# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


// src/data/festivalsData.js

export const festivalsData = [
  {
    id: 1,
    name: "Ras Yatra",
    category: "major",
    season: "Winter",
    duration: "3 Days",
    description: "The grandest festival celebrating Lord Krishna's divine play with the Gopis. A spectacular celebration of devotion, music, and dance that attracts thousands of pilgrims.",
    highlights: [
      "Elaborate Ras Leela performances",
      "Traditional Kirtan sessions",
      "Decorated temple processions",
      "Cultural dance competitions",
      "Community feast (Mahaprasad)"
    ],
    date: "November-December (Kartik Purnima)",
    significance: "Celebrates the divine love between Radha and Krishna, representing the soul's longing for the divine.",
    traditions: [
      "Devotees dress as Radha-Krishna",
      "24-hour continuous kirtan",
      "Traditional Bengali sweets distribution",
      "Boat decorations on nearby rivers"
    ],
    icon: "🎭",
    color: "from-purple-600 to-pink-600",
    detailedDescription: `Ras Yatra is the most magnificent festival celebrated in Santipur, drawing thousands of devotees from across Bengal and beyond. This three-day extravaganza transforms the entire town into a divine celebration of love, devotion, and spiritual ecstasy.

The festival commemorates Lord Krishna's Ras Leela - the divine dance with the Gopis under the full moon. Each evening, elaborate performances recreate these celestial events, with talented artists portraying the divine love story through classical dance, music, and theatrical performances.

The streets come alive with colorful decorations, traditional music echoing through the air, and the sweet fragrance of incense and flowers. Devotees from all walks of life gather to witness the spectacular processions and participate in the continuous kirtan that goes on day and night.`,
    images: [
      { 
        url: "https://images.unsplash.com/photo-1583309122708-cde2cd665952?w=800", 
        caption: "Grand Ras Leela Performance" 
      },
      { 
        url: "https://images.unsplash.com/photo-1609169707991-f0c6dc0738a4?w=800", 
        caption: "Temple Decorations" 
      },
      { 
        url: "https://images.unsplash.com/photo-1591947733656-bce993e2619b?w=800", 
        caption: "Evening Kirtan Session" 
      },
      { 
        url: "https://images.unsplash.com/photo-1609652717642-c0eaaa2eb89f?w=800", 
        caption: "Community Celebration" 
      }
    ],
    fairInfo: {
      description: "A grand fair is organized during Ras Yatra, featuring traditional handicrafts, Bengali sweets, religious artifacts, and cultural performances.",
      stalls: [
        "Traditional Handicrafts", 
        "Bengali Sweets", 
        "Religious Books & Artifacts", 
        "Handloom Textiles", 
        "Local Art"
      ],
      timings: "10 AM - 10 PM daily",
      specialAttractions: [
        "Folk Music Performances", 
        "Traditional Dance Shows", 
        "Food Court", 
        "Kids Play Zone"
      ]
    },
    clubs: [
      {
        id: 1,
        name: "Santipur Ras Mandir Samiti",
        description: "The oldest and most renowned club organizing the main Ras Yatra celebrations since 1875.",
        location: "Central Santipur",
        deity: "Radha Krishna",
        images: ["https://images.unsplash.com/photo-1603794052293-36f3ad06d0a7?w=600"],
        specialties: [
          "100+ member kirtan team", 
          "Traditional Ras Mandap", 
          "24-hour continuous programs"
        ],
        contactPerson: "Shri Gopal Chatterjee",
        established: "1875"
      },
      {
        id: 2,
        name: "Palpara Ras Utsav Committee",
        description: "Known for their spectacular light decorations and modern presentation while maintaining traditional values.",
        location: "Palpara Area",
        deity: "Radha Madhav",
        images: ["https://images.unsplash.com/photo-1604608672516-f1b9b1a3a854?w=600"],
        specialties: [
          "Modern light installations", 
          "Cultural competitions", 
          "Youth participation programs"
        ],
        contactPerson: "Sri Amit Banerjee",
        established: "1920"
      },
      {
        id: 3,
        name: "Fulia Ras Mandali",
        description: "Famous for their authentic traditional performances and preservation of ancient Ras Leela styles.",
        location: "Fulia",
        deity: "Radha Govinda",
        images: ["https://images.unsplash.com/photo-1593969321516-f6296990d771?w=600"],
        specialties: [
          "Traditional dance forms", 
          "Classical music performances", 
          "Heritage documentation"
        ],
        contactPerson: "Pandit Radhakanta Das",
        established: "1902"
      },
      {
        id: 4,
        name: "Nagar Sankirtan Mandal",
        description: "Specializes in organizing massive sankirtan processions through the town streets.",
        location: "Market Area",
        deity: "Gauranga Mahaprabhu",
        images: ["https://images.unsplash.com/photo-1570231982776-1c0d6f4fead7?w=600"],
        specialties: [
          "Grand processions", 
          "Street performances", 
          "Community feasts"
        ],
        contactPerson: "Baba Hari Das",
        established: "1895"
      },
      {
        id: 5,
        name: "Mahila Samiti Ras Utsav",
        description: "Women-led organization known for their elegant decorations and community welfare activities.",
        location: "Station Road",
        deity: "Radha Rani",
        images: ["https://images.unsplash.com/photo-1574604275896-1e8f5be00c5f?w=600"],
        specialties: [
          "Women empowerment programs", 
          "Traditional crafts exhibition", 
          "Educational workshops"
        ],
        contactPerson: "Srimati Anjali Devi",
        established: "1965"
      }
    ]
  },
  {
    id: 2,
    name: "Dol Jatra (Holi)",
    category: "major",
    season: "Spring",
    duration: "2 Days",
    description: "The festival of colors celebrating spring's arrival and Lord Krishna's playful nature.",
    highlights: [
      "Colorful powder (abir) celebrations",
      "Traditional Holi songs",
      "Community color fights",
      "Special Holi delicacies",
      "Cultural programs"
    ],
    date: "March (Falgun Purnima)",
    significance: "Represents the victory of good over evil and the arrival of spring, celebrating Krishna's playful spirit.",
    traditions: [
      "Early morning temple prayers",
      "Throwing colored powders",
      "Traditional drums and music",
      "Sweet preparation and sharing"
    ],
    icon: "🎨",
    color: "from-red-500 to-yellow-500",
    detailedDescription: `Dol Jatra, also known as Holi, marks the arrival of spring with an explosion of colors, joy, and celebration. In Santipur, this festival takes on a special spiritual significance as devotees celebrate Lord Krishna's playful nature.

The festivities begin early morning with special prayers at temples, followed by the traditional throwing of colored powders (abir). The entire town transforms into a canvas of vibrant colors as people of all ages participate in the celebrations.

Traditional Holi songs and dhol beats fill the air, creating an atmosphere of pure joy and unity. Special delicacies like gujiya, thandai, and various Bengali sweets are prepared and shared among neighbors and friends.`,
    images: [
      { 
        url: "https://images.unsplash.com/photo-1583225214464-9296029427aa?w=800", 
        caption: "Colorful Celebrations" 
      },
      { 
        url: "https://images.unsplash.com/photo-1616530940355-351fabd9524b?w=800", 
        caption: "Traditional Abir Play" 
      },
      { 
        url: "https://images.unsplash.com/photo-1551972805-8f17c8fcbe48?w=800", 
        caption: "Community Gathering" 
      }
    ],
    fairInfo: {
      description: "The Dol Mela features stalls selling colored powders, water guns, traditional sweets, and spring season specialties.",
      stalls: [
        "Colored Powders", 
        "Traditional Sweets", 
        "Water Toys", 
        "Spring Flowers", 
        "Festive Clothing"
      ],
      timings: "6 AM - 8 PM",
      specialAttractions: [
        "Live Music Performances", 
        "Dance Competitions", 
        "Food Festival", 
        "Children's Games"
      ]
    },
    clubs: [
      {
        id: 1,
        name: "Santipur Dol Utsav Samiti",
        description: "Organizes the largest Dol celebrations with eco-friendly colors and cultural programs.",
        location: "Town Square",
        deity: "Radha Krishna",
        images: ["https://images.unsplash.com/photo-1528825871115-3581a5387919?w=600"],
        specialties: [
          "Eco-friendly celebrations", 
          "Cultural performances", 
          "Community unity programs"
        ],
        contactPerson: "Sri Narayan Ghosh",
        established: "1888"
      },
      {
        id: 2,
        name: "Yuva Dol Mandali",
        description: "Youth-focused organization bringing modern energy to traditional celebrations.",
        location: "College Road",
        deity: "Krishna Balaram",
        images: ["https://images.unsplash.com/photo-1566737236500-c8ac43014a67?w=600"],
        specialties: [
          "DJ music integration", 
          "Social media campaigns", 
          "Youth engagement activities"
        ],
        contactPerson: "Rohit Chakraborty",
        established: "2005"
      },
      {
        id: 3,
        name: "Parivar Dol Sangh",
        description: "Family-oriented celebrations focusing on traditional values and children's participation.",
        location: "Residential Area",
        deity: "Radha Madhav",
        images: ["https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=600"],
        specialties: [
          "Family programs", 
          "Children's activities", 
          "Safe celebrations"
        ],
        contactPerson: "Tapan Kumar Roy",
        established: "1978"
      }
    ]
  },
  {
    id: 3,
    name: "Rath Yatra",
    category: "major",
    season: "Summer",
    duration: "7 Days",
    description: "The chariot festival where decorated chariots carry the deities through the streets.",
    highlights: [
      "Grand chariot processions",
      "Deity decorations",
      "Street performances",
      "Prasadam distribution",
      "Community participation"
    ],
    date: "June-July (Ashadh)",
    significance: "Celebrates Lord Jagannath's journey to visit devotees, symbolizing God's accessibility to all.",
    traditions: [
      "Hand-pulling decorated chariots",
      "Offering flowers and fruits",
      "Singing devotional songs",
      "Community service activities"
    ],
    icon: "🚂",
    color: "from-orange-600 to-red-600",
    detailedDescription: "The magnificent Rath Yatra is a week-long celebration featuring grand chariot processions through the streets of Santipur. This ancient tradition brings together thousands of devotees who pull the decorated chariots carrying the deities.",
    images: [
      { 
        url: "https://images.unsplash.com/photo-1588421357574-87938a86fa28?w=800", 
        caption: "Grand Chariot Procession" 
      }
    ],
    fairInfo: {
      description: "Week-long fair with religious items, food stalls, and cultural performances.",
      stalls: ["Prasadam", "Religious Books", "Handicrafts", "Traditional Foods"],
      timings: "8 AM - 9 PM",
      specialAttractions: [
        "Chariot Procession", 
        "Daily Cultural Programs", 
        "Mahaprasad Distribution"
      ]
    },
    clubs: [
      {
        id: 1,
        name: "Santipur Rath Yatra Committee",
        description: "Main organizer of the grand Rath Yatra with historical significance.",
        location: "Main Road",
        deity: "Jagannath, Balabhadra, Subhadra",
        images: ["https://images.unsplash.com/photo-1605649487212-47bdab064df7?w=600"],
        specialties: [
          "Historic chariots", 
          "Traditional rituals", 
          "Large-scale organization"
        ],
        contactPerson: "Sri Bimal Das",
        established: "1850"
      }
    ]
  },
  {
    id: 4,
    name: "Janmashtami",
    category: "other",
    season: "Monsoon",
    duration: "1 Day",
    description: "Lord Krishna's birthday celebration with midnight festivities.",
    highlights: [
      "Midnight celebrations",
      "Krishna Leela performances",
      "Dahi Handi ceremonies",
      "Devotional music",
      "Special temple decorations"
    ],
    date: "August-September (Bhadra)",
    significance: "Celebrates the birth of Lord Krishna, symbolizing the divine incarnation.",
    traditions: [
      "Fasting until midnight",
      "Cradle ceremonies",
      "Jhulana (swing) decorations",
      "108 names chanting"
    ],
    icon: "👶",
    color: "from-blue-600 to-purple-600"
  },
  {
    id: 5,
    name: "Gaura Purnima",
    category: "other",
    season: "Spring",
    duration: "1 Day",
    description: "Celebrating the appearance of Sri Chaitanya Mahaprabhu.",
    highlights: [
      "Chaitanya Leela performances",
      "Sankirtan processions",
      "Community prayers",
      "Devotional discourses",
      "Traditional feast"
    ],
    date: "March (Falgun Purnima)",
    significance: "Honors Sri Chaitanya's contributions to devotional practices.",
    traditions: [
      "Golden Gauranga processions",
      "24-hour naam sankirtan",
      "Charitable activities",
      "Community singing"
    ],
    icon: "🙏",
    color: "from-yellow-500 to-orange-500"
  },
  {
    id: 6,
    name: "Durga Puja",
    category: "other",
    season: "Autumn",
    duration: "5 Days",
    description: "The grand celebration of Goddess Durga's victory over evil.",
    highlights: [
      "Artistic idol installations",
      "Cultural performances",
      "Traditional music concerts",
      "Community gatherings",
      "Bhog distribution"
    ],
    date: "September-October (Ashwin)",
    significance: "Celebrates the divine feminine power and the triumph of good over evil.",
    traditions: [
      "Elaborate pandal decorations",
      "Traditional dhak playing",
      "Anjali offerings",
      "Sindur khela ceremony"
    ],
    icon: "🏺",
    color: "from-pink-600 to-purple-600"
  }
]

// src/components/festivals/FestivalDetailModal.jsx

import { useState } from 'react'
import ImageGallery from './ImageGallery'
import FairInformation from './FairInformation'
import ClubsList from './ClubsList'

export default function FestivalDetailModal({ festival, onClose }) {
  const [activeTab, setActiveTab] = useState('overview')

  if (!festival) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-3xl max-w-7xl w-full max-h-[95vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className={`bg-gradient-to-r ${festival.color} p-8 text-white relative flex-shrink-0`}>
          <button
            onClick={onClose}
            className="absolute top-4 right-4 w-10 h-10 bg-white/20 rounded-full flex items-center justify-center hover:bg-white/30 transition-colors"
          >
            <span className="text-2xl">&times;</span>
          </button>
          
          <div className="flex items-center space-x-4">
            <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center text-4xl">
              {festival.icon}
            </div>
            <div>
              <h2 className="text-4xl font-bold font-serif">{festival.name}</h2>
              <p className="text-xl opacity-90 mt-1">{festival.date}</p>
              <p className="text-sm opacity-75 mt-1">{festival.duration} • {festival.season}</p>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="border-b border-gray-200 bg-gray-50 flex-shrink-0">
          <div className="flex space-x-1 px-8">
            <button
              onClick={() => setActiveTab('overview')}
              className={`px-6 py-3 font-semibold transition-all ${
                activeTab === 'overview'
                  ? 'border-b-2 border-red-600 text-red-600'
                  : 'text-gray-600 hover:text-red-600'
              }`}
            >
              Overview
            </button>
            {festival.images && (
              <button
                onClick={() => setActiveTab('gallery')}
                className={`px-6 py-3 font-semibold transition-all ${
                  activeTab === 'gallery'
                    ? 'border-b-2 border-red-600 text-red-600'
                    : 'text-gray-600 hover:text-red-600'
                }`}
              >
                Gallery
              </button>
            )}
            {festival.fairInfo && (
              <button
                onClick={() => setActiveTab('fair')}
                className={`px-6 py-3 font-semibold transition-all ${
                  activeTab === 'fair'
                    ? 'border-b-2 border-red-600 text-red-600'
                    : 'text-gray-600 hover:text-red-600'
                }`}
              >
                Fair Info
              </button>
            )}
            {festival.clubs && (
              <button
                onClick={() => setActiveTab('clubs')}
                className={`px-6 py-3 font-semibold transition-all ${
                  activeTab === 'clubs'
                    ? 'border-b-2 border-red-600 text-red-600'
                    : 'text-gray-600 hover:text-red-600'
                }`}
              >
                Clubs ({festival.clubs?.length || 0})
              </button>
            )}
          </div>
        </div>

        {/* Content Area */}
        <div className="flex-1 overflow-y-auto p-8">
          {activeTab === 'overview' && (
            <div>
              <div className="mb-8">
                <h3 className="text-2xl font-bold text-gray-800 mb-4">About the Festival</h3>
                <div className="prose max-w-none">
                  {festival.detailedDescription ? (
                    festival.detailedDescription.split('\n\n').map((para, i) => (
                      <p key={i} className="text-gray-700 leading-relaxed mb-4">{para}</p>
                    ))
                  ) : (
                    <p className="text-gray-700 leading-relaxed mb-4">{festival.description}</p>
                  )}
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-8 mb-8">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-3">Festival Highlights</h4>
                  <ul className="space-y-2">
                    {festival.highlights.map((highlight, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="w-2 h-2 bg-blue-600 rounded-full mt-2"></span>
                        <span className="text-gray-700">{highlight}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-3">Traditional Practices</h4>
                  <ul className="space-y-2">
                    {festival.traditions.map((tradition, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="w-2 h-2 bg-orange-600 rounded-full mt-2"></span>
                        <span className="text-gray-700">{tradition}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="bg-blue-50 p-6 rounded-xl">
                <h4 className="text-lg font-semibold text-gray-800 mb-3">Significance</h4>
                <p className="text-gray-700">{festival.significance}</p>
              </div>
            </div>
          )}

          {activeTab === 'gallery' && festival.images && (
            <ImageGallery images={festival.images} />
          )}

          {activeTab === 'fair' && festival.fairInfo && (
            <FairInformation fairInfo={festival.fairInfo} />
          )}

          {activeTab === 'clubs' && festival.clubs && (
            <ClubsList clubs={festival.clubs} />
          )}
        </div>
      </div>
    </div>
  )
}

// COMPONENT 5: ClubsList.jsx
// ============================================
import ClubCard from './ClubCard.jsx'

export default function ClubsList({ clubs }) {
  return (
    <div className="mb-8">
      <h3 className="text-2xl font-bold text-gray-800 mb-4 flex items-center">
        <span className="text-3xl mr-3">🏛️</span>
        Participating Clubs & Organizations
      </h3>
      <p className="text-gray-600 mb-6">
        Discover the various clubs and committees that organize and participate in this festival
      </p>

      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {clubs.map(club => (
          <ClubCard key={club.id} club={club} />
        ))}
      </div>
    </div>
  )
}

// COMPONENT 4: ClubCard.jsx
// ============================================
import { useState } from 'react'

export default function ClubCard({ club }) {
  const [showDetails, setShowDetails] = useState(false)

  return (
    <div className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all">
      <img 
        src={club.images[0]} 
        alt={club.name}
        className="w-full h-48 object-cover"
      />
      
      <div className="p-5">
        <div className="flex justify-between items-start mb-3">
          <h4 className="text-xl font-bold text-gray-800">{club.name}</h4>
          <span className="text-sm text-gray-500">Est. {club.established}</span>
        </div>

        <div className="mb-3">
          <span className="inline-flex items-center text-sm text-purple-700 bg-purple-50 px-3 py-1 rounded-full">
            🕉️ {club.deity}
          </span>
        </div>

        <p className="text-gray-600 text-sm mb-4 line-clamp-2">{club.description}</p>

        <button
          onClick={() => setShowDetails(!showDetails)}
          className="text-red-600 font-semibold text-sm hover:text-red-700 transition-colors"
        >
          {showDetails ? 'Show Less ▲' : 'Show More ▼'}
        </button>

        {showDetails && (
          <div className="mt-4 pt-4 border-t border-gray-200">
            <p className="text-sm text-gray-600 mb-3">
              <strong>Location:</strong> {club.location}
            </p>
            <p className="text-sm text-gray-600 mb-3">
              <strong>Contact:</strong> {club.contactPerson}
            </p>
            <div>
              <p className="text-sm font-semibold text-gray-700 mb-2">Specialties:</p>
              <ul className="space-y-1">
                {club.specialties.map((specialty, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start">
                    <span className="text-green-600 mr-2">✓</span>
                    {specialty}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

// frontend/src/pages/ClubManagement.jsx
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Toast from '../components/common/Toast.jsx';
import ClubView from '../components/club/ClubView.jsx';
import ClubForm from '../components/club/ClubForm.jsx';
import SuccessScreen from "../components/club/SuccessScreen.jsx"

export default function ClubManagement() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [existingClub, setExistingClub] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [toast, setToast] = useState(null);
  
  const [formData, setFormData] = useState({
    clubName: '',
    festivalType: '',
    description: '',
    email: '',
    images: []
  });
  
  const [previewImages, setPreviewImages] = useState([]);
  const [uploadSuccess, setUploadSuccess] = useState(false);

  const festivalTypes = [
    { value: 'durga-puja', label: 'Durga Puja', icon: '🪔' },
    { value: 'kali-puja', label: 'Kali Puja', icon: '🌙' },
    { value: 'saraswati-puja', label: 'Saraswati Puja', icon: '📚' },
    { value: 'lakshmi-puja', label: 'Lakshmi Puja', icon: '💰' },
    { value: 'jagaddhatri-puja', label: 'Jagaddhatri Puja', icon: '🦁' },
    { value: 'kartik-puja', label: 'Kartik Puja', icon: '🏹' },
    { value: 'rath-yatra', label: 'Rath Yatra', icon: '🚩' },
    { value: 'dol-yatra', label: 'Dol Yatra (Holi)', icon: '🎨' },
    { value: 'janmashtami', label: 'Janmashtami', icon: '🪈' },
    { value: 'ganesh-puja', label: 'Ganesh Puja', icon: '🐘' },
    { value: 'cultural', label: 'Cultural Events', icon: '🎭' },
    { value: 'other', label: 'Other Festivals', icon: '🎊' }
  ];

  const showToast = (message, type) => {
    setToast({ message, type });
  };

  useEffect(() => {
    const savedUser = localStorage.getItem('user');
    if (!savedUser) {
      navigate('/login');
      return;
    }
    const userData = JSON.parse(savedUser);
    setUser(userData);
    setFormData(prev => ({ ...prev, email: userData.email }));
    
    fetchExistingClub(userData.email);
  }, [navigate]);

  const fetchExistingClub = async (email) => {
    try {
      const res = await axios.get(`${import.meta.env.VITE_API_URL}/clubs?email=${email}`);
      if (res.data && res.data.length > 0) {
        const club = res.data[0];
        setExistingClub(club);
        setFormData({
          clubName: club.clubName,
          festivalType: club.festivalType,
          description: club.description,
          email: club.email,
          images: []
        });
        setPreviewImages(club.images || []);
      }
    } catch (error) {
      console.log('No existing club found');
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    
    if (files.length + previewImages.length > 10) {
      showToast('You can upload maximum 10 images', 'error');
      return;
    }

    const newImages = [...formData.images, ...files];
    setFormData({ ...formData, images: newImages });
    
    files.forEach(file => {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewImages(prev => [...prev, reader.result]);
      };
      reader.readAsDataURL(file);
    });
  };

  const removeImage = (index) => {
    setPreviewImages(prev => prev.filter((_, i) => i !== index));
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e) => {
    if (e) e.preventDefault();
    
    if (!formData.clubName || !formData.festivalType) {
      showToast('Please fill in club name and select festival type', 'error');
      return;
    }

    if (formData.images.length === 0 && previewImages.length === 0) {
      showToast('Please upload at least one image', 'error');
      return;
    }

    setLoading(true);

    try {
      const submitData = new FormData();
      submitData.append('clubName', formData.clubName);
      submitData.append('festivalType', formData.festivalType);
      submitData.append('description', formData.description);
      submitData.append('email', formData.email);
      
      formData.images.forEach(image => {
        submitData.append('images', image);
      });

      const endpoint = existingClub 
        ? `${import.meta.env.VITE_API_URL}/clubs/${existingClub._id}` 
        : `${import.meta.env.VITE_API_URL}/clubs/add`;
      
      const method = existingClub ? 'put' : 'post';

      await axios[method](endpoint, submitData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      setUploadSuccess(true);
      showToast(existingClub ? 'Club updated successfully!' : 'Club submitted for review!', 'success');

    } catch (error) {
      showToast(error.response?.data?.message || 'Upload failed. Please try again.', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    try {
      await axios.delete(`${import.meta.env.VITE_API_URL}/clubs/${existingClub._id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      showToast('Club deleted successfully!', 'success');
      setTimeout(() => navigate('/'), 1500);
    } catch (error) {
      showToast('Failed to delete club', 'error');
    }
  };

  const handleBack = () => {
    if (existingClub && isEditing) {
      setIsEditing(false);
    } else {
      navigate('/');
    }
  };

  const handleGoHome = () => {
    setUploadSuccess(false);
    if (!existingClub) {
      navigate('/');
    } else {
      setIsEditing(false);
      fetchExistingClub(formData.email);
    }
  };

  const handleViewFestivals = () => {
    navigate('/festivals');
  };

  // Show success screen - user must click button to navigate
  if (uploadSuccess) {
    return (
      <SuccessScreen 
        isUpdate={!!existingClub}
        onGoHome={handleGoHome}
        onViewFestivals={handleViewFestivals}
      />
    );
  }

  // Show club view when club exists and not editing
  if (existingClub && !isEditing) {
    return (
      <>
        <ClubView
          club={existingClub}
          festivalTypes={festivalTypes}
          previewImages={previewImages}
          onEdit={() => setIsEditing(true)}
          onDelete={handleDelete}
          onBack={() => navigate('/')}
        />
        {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
      </>
    );
  }

  // Show form (create or edit mode)
  return (
    <>
      <ClubForm
        formData={formData}
        previewImages={previewImages}
        loading={loading}
        existingClub={existingClub}
        festivalTypes={festivalTypes}
        onFormChange={setFormData}
        onImageUpload={handleImageUpload}
        onRemoveImage={removeImage}
        onSubmit={handleSubmit}
        onBack={handleBack}
      />
      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
      
      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes scaleIn {
          from {
            opacity: 0;
            transform: scale(0.9);
          }
          to {
            opacity: 1;
            transform: scale(1);
          }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.2s ease-out;
        }
        
        .animate-scaleIn {
          animation: scaleIn 0.3s ease-out;
        }
      `}</style>
    </>
  );
}



// ============================================
// FILE: components/club/ImageUploader.jsx
// ============================================
import { ImagePlus, X } from 'lucide-react';

const ImageUploader = ({ previewImages, onImageUpload, onRemoveImage, maxImages = 10 }) => (
  <div>
    <label className="block text-sm font-semibold text-gray-700 mb-3">
      Club Images * (Max {maxImages} images)
    </label>
    
    {previewImages.length > 0 && (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
        {previewImages.map((img, index) => (
          <div key={index} className="relative group aspect-square rounded-xl overflow-hidden border-2 border-gray-200">
            <img 
              src={img} 
              alt={`Preview ${index + 1}`}
              className="w-full h-full object-cover"
            />
            <button
              type="button"
              onClick={() => onRemoveImage(index)}
              className="absolute top-2 right-2 w-8 h-8 bg-red-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600"
            >
              <X size={16} className="text-white" />
            </button>
          </div>
        ))}
      </div>
    )}

    {previewImages.length < maxImages && (
      <label className="block cursor-pointer">
        <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-purple-500 hover:bg-purple-50/50 transition-all duration-300">
          <ImagePlus size={48} className="mx-auto text-gray-400 mb-3" />
          <p className="text-gray-600 font-medium mb-1">Click to upload images</p>
          <p className="text-sm text-gray-500">PNG, JPG up to 10MB each</p>
        </div>
        <input
          type="file"
          multiple
          accept="image/*"
          onChange={onImageUpload}
          className="hidden"
        />
      </label>
    )}
  </div>
);

export default ImageUploader;

// ============================================
// FILE: components/club/ClubForm.jsx
// ============================================
import { Upload, FileText, Mail, Save } from 'lucide-react';
import FestivalTypeSelector from './FestivalTypeSelector';
import ImageUploader from './ImageUploader';
import BackButton from './BackButton';

const ClubForm = ({ 
  formData, 
  previewImages, 
  loading, 
  existingClub,
  festivalTypes,
  onFormChange,
  onImageUpload,
  onRemoveImage,
  onSubmit,
  onBack
}) => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 py-12 px-4 pt-24">
      <div className="max-w-4xl mx-auto">
        <BackButton 
          onClick={onBack}
          text={existingClub ? 'Cancel & Go Home' : 'Back to Home'}
        />

        <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
          <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 p-8 text-center">
            <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Upload size={40} className="text-white" />
            </div>
            <h1 className="text-3xl font-bold text-white mb-2">
              {existingClub ? 'Update Your Club' : 'Register Your Club'}
            </h1>
            <p className="text-white/90">
              {existingClub ? 'Modify your club details and images' : 'Share your club details with the community'}
            </p>
          </div>

          <div className="p-8 space-y-6">
            {/* Club Name */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Club Name *
              </label>
              <div className="relative">
                <FileText size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  required
                  value={formData.clubName}
                  onChange={(e) => onFormChange({ ...formData, clubName: e.target.value })}
                  placeholder="Enter your club name"
                  className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors"
                />
              </div>
            </div>

            {/* Festival Type Selector */}
            <FestivalTypeSelector
              festivalTypes={festivalTypes}
              selectedType={formData.festivalType}
              onChange={(type) => onFormChange({ ...formData, festivalType: type })}
            />

            {/* Description */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => onFormChange({ ...formData, description: e.target.value })}
                placeholder="Tell us about your club, its history, and activities..."
                rows="5"
                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors resize-none"
              />
            </div>

            {/* Email */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Contact Email
              </label>
              <div className="relative">
                <Mail size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="email"
                  value={formData.email}
                  readOnly
                  className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl bg-gray-50"
                />
              </div>
            </div>

            {/* Image Uploader */}
            <ImageUploader
              previewImages={previewImages}
              onImageUpload={onImageUpload}
              onRemoveImage={onRemoveImage}
            />

            {/* Submit Button */}
            <button
              onClick={onSubmit}
              disabled={loading}
              className="w-full bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transform hover:scale-[1.02] transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {loading ? (
                <>
                  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <span>{existingClub ? 'Updating...' : 'Uploading...'}</span>
                </>
              ) : (
                <>
                  <Save size={20} />
                  <span>{existingClub ? 'Update Club' : 'Submit for Review'}</span>
                </>
              )}
            </button>

            {/* Info Note */}
            <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
              <p className="text-sm text-blue-800">
                <strong>Note:</strong> Your club submission will be reviewed by our team. 
                You'll be notified once it's approved and visible on the website.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ClubForm;


// frontend/src/components/festivals/ClubCard.jsx
import { useState } from 'react'
import { Mail, Calendar } from 'lucide-react'

export default function ClubCard({ club }) {
  const [showDetails, setShowDetails] = useState(false)

  // Guard clause - return null if club is undefined
  if (!club) {
    console.error('ClubCard: club prop is undefined')
    return null
  }

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-IN', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    } catch (error) {
      return 'N/A';
    }
  }

  // Get festival icon
  const getFestivalIcon = (festivalType) => {
    const icons = {
      'durga-puja': '🏺',
      'kali-puja': '🌙',
      'saraswati-puja': '📚',
      'lakshmi-puja': '💰',
      'jagaddhatri-puja': '🦁',
      'kartik-puja': '🏹',
      'rath-yatra': '🚂',
      'dol-yatra': '🎨',
      'janmashtami': '🪈',
      'ganesh-puja': '🐘',
      'cultural': '🎭',
      'other': '🎊'
    };
    return icons[festivalType] || '🎉';
  }

  // Format festival type
  const formatFestivalType = (festivalType) => {
    if (!festivalType) return 'Other';
    return festivalType
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  // Get default image
  const defaultImage = 'https://images.unsplash.com/photo-1583309122708-cde2cd665952?w=800';
  const primaryImage = (club.images && club.images.length > 0) ? club.images[0] : defaultImage;

  return (
    <div className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all">
      {/* Club Image */}
      <div className="relative h-48 overflow-hidden bg-gray-200">
        <img 
          src={primaryImage}
          alt={club.clubName || 'Club'}
          className="w-full h-full object-cover hover:scale-110 transition-transform duration-300"
          onError={(e) => {
            e.target.src = defaultImage;
          }}
        />
        <div className="absolute top-3 right-3">
          <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
            club.status === 'approved' 
              ? 'bg-green-500 text-white' 
              : club.status === 'pending'
              ? 'bg-yellow-500 text-white'
              : 'bg-gray-500 text-white'
          }`}>
            {club.status || 'Active'}
          </span>
        </div>
      </div>
      
      <div className="p-5">
        {/* Club Name and Date */}
        <div className="mb-3">
          <h4 className="text-xl font-bold text-gray-800 mb-1">
            {club.clubName || 'Unnamed Club'}
          </h4>
          <div className="flex items-center text-sm text-gray-500">
            <Calendar size={14} className="mr-1" />
            <span>Added {formatDate(club.createdAt)}</span>
          </div>
        </div>

        {/* Festival Type Badge */}
        {club.festivalType && (
          <div className="mb-3">
            <span className="inline-flex items-center text-sm text-purple-700 bg-purple-50 px-3 py-1 rounded-full">
              {getFestivalIcon(club.festivalType)} {formatFestivalType(club.festivalType)}
            </span>
          </div>
        )}

        {/* Description */}
        <p className="text-gray-600 text-sm mb-4 line-clamp-2">
          {club.description || 'No description provided'}
        </p>

        {/* Toggle Details Button */}
        <button
          onClick={() => setShowDetails(!showDetails)}
          className="text-red-600 font-semibold text-sm hover:text-red-700 transition-colors"
        >
          {showDetails ? 'Show Less ▲' : 'Show More ▼'}
        </button>

        {/* Expanded Details */}
        {showDetails && (
          <div className="mt-4 pt-4 border-t border-gray-200 space-y-3">
            {/* Contact Email */}
            {club.email && (
              <div className="flex items-start text-sm text-gray-600">
                <Mail size={16} className="mr-2 mt-0.5 text-purple-600 flex-shrink-0" />
                <div>
                  <strong className="text-gray-700">Contact:</strong>
                  <br />
                  <a href={`mailto:${club.email}`} className="text-purple-600 hover:underline break-all">
                    {club.email}
                  </a>
                </div>
              </div>
            )}

            {/* Image Gallery */}
            {club.images && club.images.length > 1 && (
              <div>
                <p className="text-sm font-semibold text-gray-700 mb-2">Gallery:</p>
                <div className="grid grid-cols-3 gap-2">
                  {club.images.slice(1, 4).map((img, index) => (
                    <img 
                      key={index}
                      src={img} 
                      alt={`${club.clubName} ${index + 2}`}
                      className="w-full h-20 object-cover rounded-lg hover:opacity-80 transition-opacity cursor-pointer"
                      onClick={() => window.open(img, '_blank')}
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                  ))}
                </div>
                {club.images.length > 4 && (
                  <p className="text-xs text-gray-500 mt-1">
                    +{club.images.length - 4} more images
                  </p>
                )}
              </div>
            )}

            {/* Full Description */}
            {showDetails && club.description && club.description.length > 100 && (
              <div>
                <p className="text-sm font-semibold text-gray-700 mb-1">Full Description:</p>
                <p className="text-sm text-gray-600 leading-relaxed">
                  {club.description}
                </p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}


// frontend/src/components/festivals/ClubsList.jsx
import ClubCard from './ClubCard.jsx'

export default function ClubsList({ clubs }) {
  // Validate clubs prop
  if (!clubs) {
    console.error('ClubsList: clubs prop is undefined')
    return (
      <div className="text-center py-8">
        <p className="text-red-500">Error: Unable to load clubs data</p>
      </div>
    )
  }

  if (!Array.isArray(clubs)) {
    console.error('ClubsList: clubs prop is not an array', typeof clubs)
    return (
      <div className="text-center py-8">
        <p className="text-red-500">Error: Invalid clubs data format</p>
      </div>
    )
  }

  if (clubs.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No clubs registered for this festival yet.</p>
      </div>
    )
  }

  // Filter out any invalid club objects
  const validClubs = clubs.filter(club => {
    if (!club || typeof club !== 'object') {
      console.warn('Invalid club object found:', club)
      return false
    }
    return true
  })

  if (validClubs.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No valid clubs found.</p>
      </div>
    )
  }

  return (
    <div className="mb-8">
      <h3 className="text-2xl font-bold text-gray-800 mb-4 flex items-center">
        <span className="text-3xl mr-3">🏛️</span>
        Participating Clubs & Organizations
      </h3>
      <p className="text-gray-600 mb-6">
        Discover the various clubs and committees that organize and participate in this festival
      </p>

      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {validClubs.map((club, index) => {
          // Use _id if available, otherwise use index as fallback
          const key = club._id || club.id || `club-${index}`
          return <ClubCard key={key} club={club} />
        })}
      </div>

      {/* Info box */}
      <div className="mt-8 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6">
        <div className="flex items-start space-x-4">
          <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
            <span className="text-2xl">ℹ️</span>
          </div>
          <div>
            <h4 className="font-bold text-gray-800 mb-2">Want to add your club?</h4>
            <p className="text-gray-600 text-sm mb-3">
              If you're organizing a club or committee for this festival, register now to showcase 
              your activities and connect with the community.
            </p>
            <a 
              href="/club-management"
              className="inline-block px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg text-sm font-semibold hover:shadow-lg transition-all"
            >
              Register Your Club
            </a>
          </div>
        </div>
      </div>
    </div>
  )
}


import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { X, Mail, Lock, Eye, EyeOff, ArrowLeft, LogIn } from "lucide-react";
import Toast from "../common/Toast";

export default function Login() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({ email: "", password: "" });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState(null);

  const showToast = (message, type) => {
    setToast({ message, type });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const res = await axios.post(`${import.meta.env.VITE_API_URL}/users/login`, formData);
      localStorage.setItem("token", res.data.token);
      localStorage.setItem("user", JSON.stringify(res.data.user || { name: formData.email.split('@')[0], email: formData.email }));
      
      showToast("Login successful! Redirecting...", "success");
      
      setTimeout(() => {
        navigate("/");
        window.location.reload();
      }, 1500);
    } catch (error) {
      showToast(error.response?.data?.message || "Login failed. Please try again.", "error");
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    navigate(-1);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center p-4 z-50 animate-fadeIn">
      {/* Frosted Glass Backdrop - Blurs the page content behind */}
      <div className="absolute inset-0 backdrop-blur-md bg-black/30"></div>

      {/* Login Card */}
      <div className="relative bg-white rounded-3xl max-w-md w-full shadow-2xl overflow-hidden animate-slideUp">
        {/* Back Button */}
        <button
          onClick={handleBack}
          className="absolute top-6 left-6 w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-all z-10 group"
        >
          <ArrowLeft size={20} className="text-gray-600 group-hover:-translate-x-1 transition-transform" />
        </button>

        {/* Close Button */}
        <button
          onClick={handleBack}
          className="absolute top-6 right-6 w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-all hover:rotate-90 duration-300 z-10"
        >
          <X size={20} className="text-gray-600" />
        </button>

        {/* Header */}
        <div className="bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 p-10 text-center relative">
          <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 backdrop-blur-sm">
            <LogIn size={40} className="text-white" />
          </div>
          <h2 className="text-3xl font-bold text-white mb-2">Welcome Back</h2>
          <p className="text-white/90 text-sm">Sign in to manage your club</p>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-8 space-y-5">
          {/* Email Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
            <div className="relative">
              <Mail size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type="email"
                placeholder="Enter your email"
                required
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors text-gray-800"
              />
            </div>
          </div>

          {/* Password Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <div className="relative">
              <Lock size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type={showPassword ? "text" : "password"}
                placeholder="Enter your password"
                required
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full pl-12 pr-12 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors text-gray-800"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>
          </div>

          {/* Remember & Forgot */}
          <div className="flex items-center justify-between text-sm">
            <label className="flex items-center space-x-2 cursor-pointer">
              <input type="checkbox" className="w-4 h-4 rounded border-gray-300 text-purple-600 focus:ring-purple-500" />
              <span className="text-gray-600">Remember me</span>
            </label>
            <button type="button" className="text-purple-600 hover:text-purple-700 font-medium">
              Forgot password?
            </button>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white py-3.5 rounded-xl font-semibold hover:shadow-lg transform hover:scale-[1.02] transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Signing in...
              </span>
            ) : (
              "Sign In"
            )}
          </button>

          {/* Divider */}
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-200"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-4 bg-white text-gray-500">Don't have an account?</span>
            </div>
          </div>

          {/* Signup Link */}
          <button
            type="button"
            onClick={() => navigate("/signup")}
            className="w-full text-purple-600 hover:text-purple-700 font-semibold py-3 border-2 border-purple-200 rounded-xl hover:bg-purple-50 transition-all"
          >
            Create New Account
          </button>
        </form>
      </div>

      {/* Toast Notification */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes slideUp {
          from { 
            opacity: 0;
            transform: translateY(30px) scale(0.95);
          }
          to { 
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out;
        }
        
        .animate-slideUp {
          animation: slideUp 0.4s ease-out;
        }
      `}</style>
    </div>
  );
}



// frontend/src/components/Navbar.jsx
import { useState, useEffect } from 'react';
import { Menu, X, User, ChevronDown, LogOut, UserCircle, Settings, Upload } from "lucide-react";
import { Link } from "react-router-dom";

const Navbar = ({ scrollToSection, sidebarOpen, toggleSidebar }) => {
  const [scrolled, setScrolled] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false);
  const [user, setUser] = useState(null);

  // Navbar style on scroll
  useEffect(() => {
    const handleScroll = () => {
      const offset = window.scrollY;
      setScrolled(offset > 100);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Check login status
  useEffect(() => {
    const savedUser = localStorage.getItem("user");
    if (savedUser) setUser(JSON.parse(savedUser));
  }, []);

  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuOpen && !e.target.closest('.profile-dropdown')) {
        setMenuOpen(false);
      }
    };
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, [menuOpen]);

  const handleLogout = () => {
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    setUser(null);
    setMenuOpen(false);
    window.location.reload();
  };

  const navItems = [
    { href: '#home', label: 'Home' },
    { href: '#slideshow', label: 'Slides' },
    { href: '#history', label: 'History' },
    { href: '#culture', label: 'Culture' },
    { href: '#sarees', label: 'Sarees' },
    { href: '#devotion', label: 'Devotion' }
  ];

  // Handle click and smooth scroll
  const handleNavClick = (href) => {
    const sectionId = href.substring(1);
    scrollToSection(sectionId);
  };

  return (
    <nav className={`fixed w-full top-0 z-40 transition-all duration-300 ${
      scrolled ? 'bg-white/95 backdrop-blur-md shadow-lg' 
              : 'bg-white/90 backdrop-blur-md shadow-lg'
    }`}>
      <div className="w-full mx-auto px-8 py-4 flex items-center justify-between">
        
        {/* Left side: Menu Button + Logo together */}
        <div className="flex items-center space-x-6">
          <button
            onClick={(e) => {
              e.preventDefault();
              toggleSidebar();
            }}
            className="p-2 rounded-lg hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 transition-all duration-300"
          >
            <Menu size={28} className="text-gray-700" />
          </button>

          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 rounded-2xl flex items-center justify-center shadow-md hover:shadow-lg transition-shadow duration-300">
              <span className="text-white font-bold text-xl">S</span>
            </div>
            <div>
              <h1 className="text-2xl font-bold font-serif bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Santipur
              </h1>
              <p className="text-xs text-gray-500">City of Devotion</p>
            </div>
          </div>
        </div>

        {/* Right side: Desktop Navigation + Profile together */}
        <div className="flex items-center space-x-6">
          {/* Desktop Navigation Menu */}
          <div className="hidden md:flex space-x-6">
            {navItems.map((item) => (
              <button
                key={item.href}
                onClick={() => handleNavClick(item.href)}
                className="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:to-purple-600 hover:bg-clip-text transition-all duration-300 font-medium relative group"
              >
                {item.label}
                <span className="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-600 to-purple-600 group-hover:w-full transition-all duration-300"></span>
              </button>
            ))}
          </div>

          {/* Modern Profile Dropdown */}
          <div className="relative profile-dropdown">
            <button
              className="flex items-center space-x-2 focus:outline-none group"
              onClick={(e) => {
                e.stopPropagation();
                setMenuOpen(!menuOpen);
              }}
            >
              {user ? (
                <div className="relative">
                  {/* Gradient ring around avatar */}
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 p-[2px] group-hover:shadow-lg transition-all duration-300">
                    <div className="w-full h-full rounded-full bg-white flex items-center justify-center">
                      <span className="text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                        {user.name.charAt(0).toUpperCase()}
                      </span>
                    </div>
                  </div>
                  {/* Online indicator */}
                  <div className="absolute -bottom-0.5 -right-0.5 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
                </div>
              ) : (
                <div className="w-12 h-12 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center group-hover:shadow-md transition-all duration-300 border-2 border-gray-200">
                  <User size={24} className="text-gray-600" />
                </div>
              )}
              <ChevronDown 
                size={18} 
                className={`text-gray-500 transition-transform duration-300 ${menuOpen ? 'rotate-180' : ''}`} 
              />
            </button>

            {/* Modern Dropdown Menu */}
            {menuOpen && (
              <div className="absolute right-0 mt-4 w-72 bg-white shadow-2xl rounded-2xl border border-gray-100 overflow-hidden animate-dropdown">
                {!user ? (
                  <>
                    {/* Guest User Header */}
                    <div className="p-5 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 border-b border-gray-100">
                      <div className="flex items-center space-x-3 mb-2">
                        <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center">
                          <User size={20} className="text-white" />
                        </div>
                        <div>
                          <p className="text-sm font-semibold text-gray-800">Welcome Back!</p>
                          <p className="text-xs text-gray-500">Join the Santipur community</p>
                        </div>
                      </div>
                    </div>

                    {/* Guest Menu Items */}
                    <div className="p-3">
                      <Link
                        to="/signup"
                        className="flex items-center space-x-3 px-4 py-3.5 text-gray-700 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 rounded-xl transition-all duration-300 group mb-2"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-100 to-purple-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <UserCircle size={20} className="text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="font-semibold text-gray-800">Create Account</p>
                          <p className="text-xs text-gray-500">Join as a club member</p>
                        </div>
                      </Link>

                      <Link
                        to="/login"
                        className="flex items-center space-x-3 px-4 py-3.5 text-gray-700 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 rounded-xl transition-all duration-300 group"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <User size={20} className="text-purple-600" />
                        </div>
                        <div className="flex-1">
                          <p className="font-semibold text-gray-800">Sign In</p>
                          <p className="text-xs text-gray-500">Access your account</p>
                        </div>
                      </Link>
                    </div>
                  </>
                ) : (
                  <>
                    {/* Logged-in User Header */}
                    <div className="p-5 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <div className="w-14 h-14 rounded-2xl bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 flex items-center justify-center text-white text-xl font-bold shadow-lg">
                          {user.name.charAt(0).toUpperCase()}
                        </div>
                        <div className="flex-1">
                          <p className="font-bold text-gray-800 text-lg">{user.name}</p>
                          <p className="text-xs text-gray-500">{user.email}</p>
                          <span className="inline-flex items-center mt-1 px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-700">
                            <span className="w-1.5 h-1.5 bg-green-500 rounded-full mr-1.5"></span>
                            Active
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* Logged-in Menu Items */}
                    <div className="p-3">
                      {/* My Club Option - NEW */}
                      <Link
                        to="/club-management"
                        className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 rounded-xl transition-all duration-300 group mb-2"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <Upload size={20} className="text-purple-600" />
                        </div>
                        <div className="flex-1">
                          <p className="font-semibold text-gray-800">My Club</p>
                          <p className="text-xs text-gray-500">Manage your club</p>
                        </div>
                      </Link>

                      <Link
                        to="/profile"
                        className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 rounded-xl transition-all duration-300 group mb-2"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-100 to-purple-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <UserCircle size={20} className="text-blue-600" />
                        </div>
                        <span className="font-medium text-gray-800">My Profile</span>
                      </Link>

                      <button
                        className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100 rounded-xl transition-all duration-300 group mb-2 w-full text-left"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gray-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <Settings size={20} className="text-gray-600" />
                        </div>
                        <span className="font-medium text-gray-800">Settings</span>
                      </button>

                      <div className="border-t border-gray-100 my-2"></div>
                      
                      <button
                        onClick={handleLogout}
                        className="flex items-center space-x-3 px-4 py-3 text-red-600 hover:bg-red-50 rounded-xl transition-all duration-300 group w-full text-left"
                      >
                        <div className="w-10 h-10 bg-red-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <LogOut size={20} className="text-red-600" />
                        </div>
                        <span className="font-medium">Logout</span>
                      </button>
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes dropdown {
          from {
            opacity: 0;
            transform: translateY(-10px) scale(0.95);
          }
          to {
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
        
        .animate-dropdown {
          animation: dropdown 0.2s ease-out;
        }
      `}</style>
    </nav>
  );
};

export default Navbar;


// frontend/src/components/festivals/ClubDetailModal.jsx
import { useState } from 'react'
import { X, Mail, Calendar, Image as ImageIcon, ArrowLeft, ExternalLink } from 'lucide-react'

export default function ClubDetailModal({ club, onClose }) {
  const [selectedImage, setSelectedImage] = useState(0)

  if (!club) return null

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-IN', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    } catch (error) {
      return 'N/A';
    }
  }

  const getFestivalIcon = (festivalType) => {
    const icons = {
      'durga-puja': '🏺',
      'kali-puja': '🌙',
      'saraswati-puja': '📚',
      'lakshmi-puja': '💰',
      'jagaddhatri-puja': '🦁',
      'kartik-puja': '🏹',
      'rath-yatra': '🚂',
      'dol-yatra': '🎨',
      'janmashtami': '🪈',
      'ganesh-puja': '🐘',
      'cultural': '🎭',
      'other': '🎊'
    };
    return icons[festivalType] || '🎉';
  }

  const formatFestivalType = (festivalType) => {
    if (!festivalType) return 'Other';
    return festivalType
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  const defaultImage = 'https://images.unsplash.com/photo-1583309122708-cde2cd665952?w=800';
  const images = club.images && club.images.length > 0 ? club.images : [defaultImage];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fadeIn">
      <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col shadow-2xl animate-slideUp">
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-600 via-pink-600 to-red-600 p-6 text-white relative">
          <button
            onClick={onClose}
            className="absolute top-4 left-4 w-10 h-10 bg-white/20 rounded-full flex items-center justify-center hover:bg-white/30 transition-colors"
          >
            <ArrowLeft size={20} />
          </button>
          
          <button
            onClick={onClose}
            className="absolute top-4 right-4 w-10 h-10 bg-white/20 rounded-full flex items-center justify-center hover:bg-white/30 transition-colors"
          >
            <X size={20} />
          </button>

          <div className="text-center pt-8">
            <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 text-4xl">
              {getFestivalIcon(club.festivalType)}
            </div>
            <h2 className="text-3xl font-bold mb-2">{club.clubName}</h2>
            <p className="text-pink-100">{formatFestivalType(club.festivalType)}</p>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {/* Status Badge */}
          <div className="mb-6 flex justify-center">
            <span className={`px-4 py-2 rounded-full text-sm font-semibold ${
              club.status === 'approved' 
                ? 'bg-green-100 text-green-700' 
                : club.status === 'pending'
                ? 'bg-yellow-100 text-yellow-700'
                : 'bg-gray-100 text-gray-700'
            }`}>
              Status: {club.status || 'Active'}
            </span>
          </div>

          {/* Main Image Gallery */}
          <div className="mb-6">
            <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
              <ImageIcon size={24} className="mr-2 text-purple-600" />
              Club Gallery
            </h3>
            
            {/* Selected Image */}
            <div className="relative rounded-xl overflow-hidden mb-4 bg-gray-100">
              <img 
                src={images[selectedImage]}
                alt={`${club.clubName} - Image ${selectedImage + 1}`}
                className="w-full h-80 object-cover"
                onError={(e) => {
                  e.target.src = defaultImage;
                }}
              />
              <div className="absolute bottom-4 right-4 bg-black/60 text-white px-3 py-1 rounded-full text-sm">
                {selectedImage + 1} / {images.length}
              </div>
            </div>

            {/* Thumbnail Grid */}
            {images.length > 1 && (
              <div className="grid grid-cols-4 md:grid-cols-6 gap-2">
                {images.map((img, index) => (
                  <div
                    key={index}
                    onClick={() => setSelectedImage(index)}
                    className={`cursor-pointer rounded-lg overflow-hidden border-2 transition-all ${
                      selectedImage === index 
                        ? 'border-purple-600 scale-105 shadow-lg' 
                        : 'border-gray-200 hover:border-purple-400'
                    }`}
                  >
                    <img 
                      src={img}
                      alt={`Thumbnail ${index + 1}`}
                      className="w-full h-16 object-cover"
                      onError={(e) => {
                        e.target.src = defaultImage;
                      }}
                    />
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Club Details */}
          <div className="space-y-6">
            {/* Description */}
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">About the Club</h3>
              <div className="bg-gray-50 p-4 rounded-xl">
                <p className="text-gray-700 leading-relaxed">
                  {club.description || 'No description provided for this club.'}
                </p>
              </div>
            </div>

            {/* Contact Information */}
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">Contact Information</h3>
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-xl space-y-3">
                {club.email && (
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
                      <Mail size={20} className="text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm text-gray-600 font-medium">Email Address</p>
                      <a 
                        href={`mailto:${club.email}`}
                        className="text-purple-600 hover:text-purple-700 font-semibold flex items-center space-x-1"
                      >
                        <span>{club.email}</span>
                        <ExternalLink size={14} />
                      </a>
                    </div>
                  </div>
                )}

                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-pink-100 rounded-full flex items-center justify-center">
                    <Calendar size={20} className="text-pink-600" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600 font-medium">Registered On</p>
                    <p className="text-gray-800 font-semibold">{formatDate(club.createdAt)}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Additional Info */}
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">Additional Information</h3>
              <div className="grid md:grid-cols-2 gap-4">
                <div className="bg-blue-50 p-4 rounded-xl">
                  <p className="text-sm text-gray-600 mb-1">Festival Category</p>
                  <p className="text-gray-800 font-semibold flex items-center">
                    <span className="mr-2">{getFestivalIcon(club.festivalType)}</span>
                    {formatFestivalType(club.festivalType)}
                  </p>
                </div>

                <div className="bg-green-50 p-4 rounded-xl">
                  <p className="text-sm text-gray-600 mb-1">Total Images</p>
                  <p className="text-gray-800 font-semibold">
                    {images.length} {images.length === 1 ? 'Photo' : 'Photos'}
                  </p>
                </div>
              </div>
            </div>

            {/* Last Updated */}
            {club.updatedAt && club.updatedAt !== club.createdAt && (
              <div className="bg-gray-50 p-4 rounded-xl text-center">
                <p className="text-sm text-gray-600">
                  Last updated on <span className="font-semibold text-gray-800">{formatDate(club.updatedAt)}</span>
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="border-t border-gray-200 p-4 bg-gray-50">
          <button
            onClick={onClose}
            className="w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all"
          >
            Close
          </button>
        </div>
      </div>

      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes slideUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.2s ease-out;
        }
        
        .animate-slideUp {
          animation: slideUp 0.3s ease-out;
        }
      `}</style>
    </div>
  )
}