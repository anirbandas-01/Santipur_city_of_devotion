# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?




import { useState, useEffect } from 'react';
import { Menu, X, User, ChevronDown } from "lucide-react";
import { Link } from "react-router-dom";

const Navbar = ({ scrollToSection, sidebarOpen , toggleSidebar }) => {
  //const [isOpen, setIsOpen] = useState(false)
  const [scrolled, setScrolled] = useState(false);
  
  const [ menuOpen, setMenuOpen ] = useState(false);
  const [user, setUser] = useState(null);

  //navbar style on scroll
  useEffect(() => {
    const handleScroll = () => {
      const offset = window.scrollY
      setScrolled(offset > 100)
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

 
  
  // simulate login check (later, replace with token logic)
  useEffect(() => {
    const savedUser = localStorage.getItem("user");
    if (savedUser) setUser(JSON.parse(savedUser));
  }, []);

  /* const handleNavClick = (href) => {
    const sectionId = href.substring(1);
    scrollToSection(sectionId);
  }; */

  const handleLogout = () => {
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    setUser(null);
  };
  
  

  const navItems = [
    { href: '#home', label: 'Home' },
    { href: '#slideshow', label: 'Slides' },
    { href: '#history', label: 'History' },
    { href: '#culture', label: 'Culture' },
    { href: '#sarees', label: 'Sarees' },
    { href: '#devotion', label: 'Devotion' }
  ]

    //handle click and smooth scroll
  const handleNavClick = (href) => {
    const sectionId = href.substring(1)
    scrollToSection(sectionId)
  };

  return (
    <nav className={`fixed w-full top-0 z-40 transition-all duration-300 ${
 scrolled ? 'bg-white/95 backdrop-blur-md shadow-lg' 
            : 'bg-white/90 backdrop-blur-md shadow-lg'
 }`}>
  <div className="w-full mx-auto px-8 py-4 flex items-center justify-between">
    
    {/* Left side: Menu Button + Logo together */}
    <div className="flex items-center space-x-6">
      <button
        onClick={(e) => {
          e.preventDefault();
          toggleSidebar();
        }}
        className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <Menu size={28} />
      </button>

      <div className="flex items-center space-x-3">
        <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center">
          <span className="text-white font-bold text-lg">S</span>
        </div>
        <h1 className="text-2xl font-bold font-serif text-gray-800">Santipur</h1>
      </div>
    </div>

    {/* Right side: Desktop Navigation + Profile together */}
    <div className="flex items-center space-x-6">
      {/* Desktop Navigation Menu */}
      <div className="hidden md:flex space-x-6">
        {navItems.map((item) => (
          <button
            key={item.href}
            onClick={() => handleNavClick(item.href)}
            className="text-gray-600 hover:text-blue-600 transition-colors duration-300 font-medium"
          >
            {item.label}
          </button>
        ))}
      </div>

      {/* Profile Icon */}
      <div className="relative">
        <button
          className="flex items-center space-x-2 focus:outline-none"
          onClick={() => setMenuOpen(!menuOpen)}
        >
          {user ? (
            <div className="w-10 h-10 rounded-full bg-blue-600 text-white flex items-center justify-center text-lg font-bold">
              {user.name.charAt(0).toUpperCase()}
            </div>
          ) : (
            <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
              <User size={22} className="text-gray-600" />
            </div>
          )}
          <ChevronDown size={18} className="text-gray-500" />
        </button>

        {menuOpen && (
          <div className="absolute right-0 mt-3 w-48 bg-white shadow-lg rounded-lg border border-gray-100 py-2">
            {!user ? (
              <>
                  <Link
                      to="/signup"
                      className="block px-4 py-2 text-gray-700 hover:bg-gray-100"
                    >
                      Club Signup
                    </Link>
                 <Link
                      to="/login"
                      className="block px-4 py-2 text-gray-700 hover:bg-gray-100"
                    >
                      Club Login
                    </Link>
              </>
            ) : (
              <>
                <Link
                      to="/profile"
                      className="block px-4 py-2 text-gray-700 hover:bg-gray-100"
                    >
                      My Profile
                    </Link>
                <button
                  onClick={handleLogout}
                  className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100"
                >
                  Logout
                </button>
              </>
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</nav>
  );
};

export default Navbar;

import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { X, Mail, Lock, User, Eye, EyeOff, ArrowLeft, UserPlus } from "lucide-react";
import Toast from "../common/Toast";

export default function Signup() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({ name: "", email: "", password: "" });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState(null);

  const showToast = (message, type) => {
    setToast({ message, type });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      await axios.post("http://localhost:5000/api/users/register", formData);
      showToast("Account created successfully! Please login.", "success");
      
      setTimeout(() => {
        navigate("/login");
      }, 1500);
    } catch (error) {
      showToast(error.response?.data?.message || "Signup failed. Please try again.", "error");
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    navigate(-1);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center p-4 z-50 animate-fadeIn">
      {/* Frosted Glass Backdrop - Blurs the page content behind */}
      <div className="absolute inset-0 backdrop-blur-md bg-black/30"></div>

      {/* Signup Card */}
      <div className="relative bg-white rounded-3xl max-w-md w-full shadow-2xl overflow-hidden animate-slideUp">
        {/* Back Button */}
        <button
          onClick={handleBack}
          className="absolute top-6 left-6 w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-all z-10 group"
        >
          <ArrowLeft size={20} className="text-gray-600 group-hover:-translate-x-1 transition-transform" />
        </button>

        {/* Close Button */}
        <button
          onClick={handleBack}
          className="absolute top-6 right-6 w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-all hover:rotate-90 duration-300 z-10"
        >
          <X size={20} className="text-gray-600" />
        </button>

        {/* Header */}
        <div className="bg-gradient-to-br from-purple-600 via-pink-600 to-orange-600 p-10 text-center relative">
          <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 backdrop-blur-sm">
            <UserPlus size={40} className="text-white" />
          </div>
          <h2 className="text-3xl font-bold text-white mb-2">Join Santipur</h2>
          <p className="text-white/90 text-sm">Create your club account today</p>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-8 space-y-5">
          {/* Name Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Club Name</label>
            <div className="relative">
              <User size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Enter club name"
                required
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-pink-500 focus:outline-none transition-colors text-gray-800"
              />
            </div>
          </div>

          {/* Email Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
            <div className="relative">
              <Mail size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type="email"
                placeholder="Enter your email"
                required
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-pink-500 focus:outline-none transition-colors text-gray-800"
              />
            </div>
          </div>

          {/* Password Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <div className="relative">
              <Lock size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type={showPassword ? "text" : "password"}
                placeholder="Create a password"
                required
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full pl-12 pr-12 py-3 border-2 border-gray-200 rounded-xl focus:border-pink-500 focus:outline-none transition-colors text-gray-800"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>
            <p className="text-xs text-gray-500 mt-2">Password must be at least 8 characters</p>
          </div>

          {/* Terms & Conditions */}
          <div className="flex items-start space-x-2">
            <input 
              type="checkbox" 
              required
              className="w-4 h-4 mt-1 rounded border-gray-300 text-pink-600 focus:ring-pink-500" 
            />
            <label className="text-sm text-gray-600">
              I agree to the <button type="button" className="text-pink-600 hover:text-pink-700 font-medium">Terms & Conditions</button> and <button type="button" className="text-pink-600 hover:text-pink-700 font-medium">Privacy Policy</button>
            </label>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-orange-600 text-white py-3.5 rounded-xl font-semibold hover:shadow-lg transform hover:scale-[1.02] transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating account...
              </span>
            ) : (
              "Create Account"
            )}
          </button>

          {/* Divider */}
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-200"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-4 bg-white text-gray-500">Already have an account?</span>
            </div>
          </div>

          {/* Login Link */}
          <button
            type="button"
            onClick={() => navigate("/login")}
            className="w-full text-pink-600 hover:text-pink-700 font-semibold py-3 border-2 border-pink-200 rounded-xl hover:bg-pink-50 transition-all"
          >
            Sign In Instead
          </button>
        </form>
      </div>

      {/* Toast Notification */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes slideUp {
          from { 
            opacity: 0;
            transform: translateY(30px) scale(0.95);
          }
          to { 
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out;
        }
        
        .animate-slideUp {
          animation: slideUp 0.4s ease-out;
        }
      `}</style>
    </div>
  );
}



import { useState, useEffect } from 'react';
import { Menu, X, User, ChevronDown, LogOut, UserCircle, Settings } from "lucide-react";
import { Link } from "react-router-dom";

const Navbar = ({ scrollToSection, sidebarOpen, toggleSidebar }) => {
  const [scrolled, setScrolled] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false);
  const [user, setUser] = useState(null);

  // Navbar style on scroll
  useEffect(() => {
    const handleScroll = () => {
      const offset = window.scrollY;
      setScrolled(offset > 100);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Simulate login check
  useEffect(() => {
    const savedUser = localStorage.getItem("user");
    if (savedUser) setUser(JSON.parse(savedUser));
  }, []);

  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuOpen && !e.target.closest('.profile-dropdown')) {
        setMenuOpen(false);
      }
    };
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, [menuOpen]);

  const handleLogout = () => {
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    setUser(null);
    setMenuOpen(false);
  };

  const navItems = [
    { href: '#home', label: 'Home' },
    { href: '#slideshow', label: 'Slides' },
    { href: '#history', label: 'History' },
    { href: '#culture', label: 'Culture' },
    { href: '#sarees', label: 'Sarees' },
    { href: '#devotion', label: 'Devotion' }
  ];

  // Handle click and smooth scroll
  const handleNavClick = (href) => {
    const sectionId = href.substring(1);
    scrollToSection(sectionId);
  };

  return (
    <nav className={`fixed w-full top-0 z-40 transition-all duration-300 ${
      scrolled ? 'bg-white/95 backdrop-blur-md shadow-lg' 
              : 'bg-white/90 backdrop-blur-md shadow-lg'
    }`}>
      <div className="w-full mx-auto px-8 py-4 flex items-center justify-between">
        
        {/* Left side: Menu Button + Logo together */}
        <div className="flex items-center space-x-6">
          <button
            onClick={(e) => {
              e.preventDefault();
              toggleSidebar();
            }}
            className="p-2 rounded-lg hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 transition-all duration-300"
          >
            <Menu size={28} className="text-gray-700" />
          </button>

          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 rounded-2xl flex items-center justify-center shadow-md hover:shadow-lg transition-shadow duration-300">
              <span className="text-white font-bold text-xl">S</span>
            </div>
            <div>
              <h1 className="text-2xl font-bold font-serif bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Santipur
              </h1>
              <p className="text-xs text-gray-500">City of Devotion</p>
            </div>
          </div>
        </div>

        {/* Right side: Desktop Navigation + Profile together */}
        <div className="flex items-center space-x-6">
          {/* Desktop Navigation Menu */}
          <div className="hidden md:flex space-x-6">
            {navItems.map((item) => (
              <button
                key={item.href}
                onClick={() => handleNavClick(item.href)}
                className="text-gray-600 hover:text-transparent hover:bg-gradient-to-r hover:from-blue-600 hover:to-purple-600 hover:bg-clip-text transition-all duration-300 font-medium relative group"
              >
                {item.label}
                <span className="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-600 to-purple-600 group-hover:w-full transition-all duration-300"></span>
              </button>
            ))}
          </div>

          {/* Modern Profile Dropdown */}
          <div className="relative profile-dropdown">
            <button
              className="flex items-center space-x-2 focus:outline-none group"
              onClick={(e) => {
                e.stopPropagation();
                setMenuOpen(!menuOpen);
              }}
            >
              {user ? (
                <div className="relative">
                  {/* Gradient ring around avatar */}
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 p-[2px] group-hover:shadow-lg transition-all duration-300">
                    <div className="w-full h-full rounded-full bg-white flex items-center justify-center">
                      <span className="text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                        {user.name.charAt(0).toUpperCase()}
                      </span>
                    </div>
                  </div>
                  {/* Online indicator */}
                  <div className="absolute -bottom-0.5 -right-0.5 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
                </div>
              ) : (
                <div className="w-12 h-12 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center group-hover:shadow-md transition-all duration-300 border-2 border-gray-200">
                  <User size={24} className="text-gray-600" />
                </div>
              )}
              <ChevronDown 
                size={18} 
                className={`text-gray-500 transition-transform duration-300 ${menuOpen ? 'rotate-180' : ''}`} 
              />
            </button>

            {/* Modern Dropdown Menu */}
            {menuOpen && (
              <div className="absolute right-0 mt-4 w-72 bg-white shadow-2xl rounded-2xl border border-gray-100 overflow-hidden animate-dropdown">
                {!user ? (
                  <>
                    {/* Guest User Header */}
                    <div className="p-5 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 border-b border-gray-100">
                      <div className="flex items-center space-x-3 mb-2">
                        <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center">
                          <User size={20} className="text-white" />
                        </div>
                        <div>
                          <p className="text-sm font-semibold text-gray-800">Welcome Back!</p>
                          <p className="text-xs text-gray-500">Join the Santipur community</p>
                        </div>
                      </div>
                    </div>

                    {/* Guest Menu Items */}
                    <div className="p-3">
                      <Link
                        to="/signup"
                        className="flex items-center space-x-3 px-4 py-3.5 text-gray-700 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 rounded-xl transition-all duration-300 group mb-2"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-100 to-purple-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <UserCircle size={20} className="text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="font-semibold text-gray-800">Create Account</p>
                          <p className="text-xs text-gray-500">Join as a club member</p>
                        </div>
                      </Link>

                      <Link
                        to="/login"
                        className="flex items-center space-x-3 px-4 py-3.5 text-gray-700 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 rounded-xl transition-all duration-300 group"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <User size={20} className="text-purple-600" />
                        </div>
                        <div className="flex-1">
                          <p className="font-semibold text-gray-800">Sign In</p>
                          <p className="text-xs text-gray-500">Access your account</p>
                        </div>
                      </Link>
                    </div>
                  </>
                ) : (
                  <>
                    {/* Logged-in User Header */}
                    <div className="p-5 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <div className="w-14 h-14 rounded-2xl bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 flex items-center justify-center text-white text-xl font-bold shadow-lg">
                          {user.name.charAt(0).toUpperCase()}
                        </div>
                        <div className="flex-1">
                          <p className="font-bold text-gray-800 text-lg">{user.name}</p>
                          <p className="text-xs text-gray-500">{user.email}</p>
                          <span className="inline-flex items-center mt-1 px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-700">
                            <span className="w-1.5 h-1.5 bg-green-500 rounded-full mr-1.5"></span>
                            Active
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* Logged-in Menu Items */}
                    <div className="p-3">
                      <Link
                        to="/profile"
                        className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 rounded-xl transition-all duration-300 group mb-2"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-100 to-purple-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <UserCircle size={20} className="text-blue-600" />
                        </div>
                        <span className="font-medium text-gray-800">My Profile</span>
                      </Link>

                      <button
                        className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100 rounded-xl transition-all duration-300 group mb-2 w-full"
                        onClick={() => setMenuOpen(false)}
                      >
                        <div className="w-10 h-10 bg-gray-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <Settings size={20} className="text-gray-600" />
                        </div>
                        <span className="font-medium text-gray-800">Settings</span>
                      </button>

                      <div className="border-t border-gray-100 my-2"></div>
                      
                      <button
                        onClick={handleLogout}
                        className="flex items-center space-x-3 px-4 py-3 text-red-600 hover:bg-red-50 rounded-xl transition-all duration-300 group w-full"
                      >
                        <div className="w-10 h-10 bg-red-100 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                          <LogOut size={20} className="text-red-600" />
                        </div>
                        <span className="font-medium">Logout</span>
                      </button>
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes dropdown {
          from {
            opacity: 0;
            transform: translateY(-10px) scale(0.95);
          }
          to {
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
        
        .animate-dropdown {
          animation: dropdown 0.2s ease-out;
        }
      `}</style>
    </nav>
  );
};

export default Navbar;

// frontend/src/components/ClubManagement.jsx
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Upload, X, ImagePlus, FileText, Calendar, Mail, Save, Trash2, Edit, CheckCircle, ArrowLeft } from 'lucide-react';
import axios from 'axios';
import Toast from './common/Toast';

export default function ClubManagement() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [existingClub, setExistingClub] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [toast, setToast] = useState(null);
  
  const [formData, setFormData] = useState({
    clubName: '',
    festivalType: '',
    description: '',
    email: '',
    images: []
  });
  
  const [previewImages, setPreviewImages] = useState([]);
  const [uploadSuccess, setUploadSuccess] = useState(false);

  const festivalTypes = [
    { value: 'durga-puja', label: 'Durga Puja', icon: '🪔' },
    { value: 'kali-puja', label: 'Kali Puja', icon: '🌙' },
    { value: 'saraswati-puja', label: 'Saraswati Puja', icon: '📚' },
    { value: 'lakshmi-puja', label: 'Lakshmi Puja', icon: '💰' },
    { value: 'jagaddhatri-puja', label: 'Jagaddhatri Puja', icon: '🦁' },
    { value: 'kartik-puja', label: 'Kartik Puja', icon: '🏹' },
    { value: 'rath-yatra', label: 'Rath Yatra', icon: '🚩' },
    { value: 'dol-yatra', label: 'Dol Yatra (Holi)', icon: '🎨' },
    { value: 'janmashtami', label: 'Janmashtami', icon: '🪈' },
    { value: 'ganesh-puja', label: 'Ganesh Puja', icon: '🐘' },
    { value: 'cultural', label: 'Cultural Events', icon: '🎭' },
    { value: 'other', label: 'Other Festivals', icon: '🎊' }
  ];

  const showToast = (message, type) => {
    setToast({ message, type });
  };

  useEffect(() => {
    const savedUser = localStorage.getItem('user');
    if (!savedUser) {
      navigate('/login');
      return;
    }
    const userData = JSON.parse(savedUser);
    setUser(userData);
    setFormData(prev => ({ ...prev, email: userData.email }));
    
    // Fetch existing club data
    fetchExistingClub(userData.email);
  }, [navigate]);

  const fetchExistingClub = async (email) => {
    try {
      const res = await axios.get(`http://localhost:5000/api/clubs?email=${email}`);
      if (res.data && res.data.length > 0) {
        const club = res.data[0];
        setExistingClub(club);
        setFormData({
          clubName: club.clubName,
          festivalType: club.festivalType,
          description: club.description,
          email: club.email,
          images: []
        });
        setPreviewImages(club.images || []);
      }
    } catch (error) {
      console.log('No existing club found');
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    
    if (files.length + previewImages.length > 10) {
      showToast('You can upload maximum 10 images', 'error');
      return;
    }

    const newImages = [...formData.images, ...files];
    setFormData({ ...formData, images: newImages });
    
    files.forEach(file => {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewImages(prev => [...prev, reader.result]);
      };
      reader.readAsDataURL(file);
    });
  };

  const removeImage = (index) => {
    setPreviewImages(prev => prev.filter((_, i) => i !== index));
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.clubName || !formData.festivalType) {
      showToast('Please fill in club name and select festival type', 'error');
      return;
    }

    if (formData.images.length === 0 && previewImages.length === 0) {
      showToast('Please upload at least one image', 'error');
      return;
    }

    setLoading(true);

    try {
      const submitData = new FormData();
      submitData.append('clubName', formData.clubName);
      submitData.append('festivalType', formData.festivalType);
      submitData.append('description', formData.description);
      submitData.append('email', formData.email);
      
      formData.images.forEach(image => {
        submitData.append('images', image);
      });

      const endpoint = existingClub 
        ? `http://localhost:5000/api/clubs/${existingClub._id}` 
        : 'http://localhost:5000/api/clubs/add';
      
      const method = existingClub ? 'put' : 'post';

      await axios[method](endpoint, submitData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      setUploadSuccess(true);
      showToast(existingClub ? 'Club updated successfully!' : 'Club submitted for review!', 'success');
      
      setTimeout(() => {
        setUploadSuccess(false);
        if (!existingClub) {
          navigate('/');
        } else {
          setIsEditing(false);
          fetchExistingClub(formData.email);
        }
      }, 2000);

    } catch (error) {
      showToast(error.response?.data?.message || 'Upload failed. Please try again.', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!window.confirm('Are you sure you want to delete your club? This action cannot be undone.')) {
      return;
    }

    try {
      await axios.delete(`http://localhost:5000/api/clubs/${existingClub._id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      showToast('Club deleted successfully!', 'success');
      setTimeout(() => navigate('/'), 1500);
    } catch (error) {
      showToast('Failed to delete club', 'error');
    }
  };

  const handleBack = () => {
    if (existingClub && isEditing) {
      setIsEditing(false);
    } else {
      navigate('/');
    }
  };

  if (uploadSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center p-4">
        {/* Back to Home Button - Fixed Position */}
        <button
          onClick={() => navigate('/')}
          className="fixed top-8 left-8 flex items-center space-x-2 px-6 py-3 bg-white text-gray-700 rounded-xl font-semibold shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 z-50 group"
        >
          <ArrowLeft size={20} className="group-hover:-translate-x-1 transition-transform" />
          <span>Back to Home</span>
        </button>

        <div className="bg-white rounded-3xl p-12 shadow-2xl text-center max-w-md animate-scaleIn">
          <div className="w-20 h-20 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6">
            <CheckCircle size={40} className="text-white" />
          </div>
          <h2 className="text-3xl font-bold text-gray-800 mb-3">
            {existingClub ? 'Updated Successfully!' : 'Uploaded Successfully!'}
          </h2>
          <p className="text-gray-600">
            {existingClub 
              ? 'Your club details have been updated.'
              : 'Your club has been submitted for review. You will be notified once approved.'}
          </p>
        </div>
      </div>
    );
  }

  // View mode when club exists and not editing
  if (existingClub && !isEditing) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 py-12 px-4">
        <div className="max-w-4xl mx-auto">
          {/* Back to Home Button - Enhanced */}
          <button
            onClick={() => navigate('/')}
            className="mb-6 flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 group"
          >
            <ArrowLeft size={20} className="group-hover:-translate-x-1 transition-transform" />
            <span>Back to Home</span>
          </button>

          <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
            <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 p-8 text-white">
              <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
                <div>
                  <h1 className="text-3xl font-bold mb-2">{existingClub.clubName}</h1>
                  <div className="flex flex-wrap items-center gap-3 text-white/90">
                    <span className="flex items-center space-x-2">
                      <Calendar size={18} />
                      <span>{festivalTypes.find(f => f.value === existingClub.festivalType)?.label}</span>
                    </span>
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      existingClub.status === 'approved' ? 'bg-green-500/20' :
                      existingClub.status === 'rejected' ? 'bg-red-500/20' :
                      'bg-yellow-500/20'
                    }`}>
                      {existingClub.status?.charAt(0).toUpperCase() + existingClub.status?.slice(1)}
                    </span>
                  </div>
                </div>
                <div className="flex space-x-3">
                  <button
                    onClick={() => setIsEditing(true)}
                    className="bg-white/20 backdrop-blur-sm px-6 py-3 rounded-xl font-semibold hover:bg-white/30 transition-all flex items-center space-x-2"
                  >
                    <Edit size={20} />
                    <span>Edit</span>
                  </button>
                  <button
                    onClick={handleDelete}
                    className="bg-red-500/20 backdrop-blur-sm px-6 py-3 rounded-xl font-semibold hover:bg-red-500/30 transition-all flex items-center space-x-2"
                  >
                    <Trash2 size={20} />
                    <span>Delete</span>
                  </button>
                </div>
              </div>
            </div>

            <div className="p-8">
              <div className="mb-8">
                <h3 className="text-xl font-bold text-gray-800 mb-3">Description</h3>
                <p className="text-gray-600 leading-relaxed">
                  {existingClub.description || 'No description provided'}
                </p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-gray-800 mb-4">Club Images</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {previewImages.map((img, index) => (
                    <div key={index} className="relative group aspect-square rounded-2xl overflow-hidden">
                      <img 
                        src={img} 
                        alt={`Club ${index + 1}`}
                        className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
      </div>
    );
  }

  // Edit/Upload form
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Back to Home Button - Enhanced */}
        <button
          onClick={() => navigate('/')}
          className="mb-6 flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 group"
        >
          <ArrowLeft size={20} className="group-hover:-translate-x-1 transition-transform" />
          <span>{existingClub ? 'Cancel & Go Home' : 'Back to Home'}</span>
        </button>

        <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
          <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 p-8 text-center">
            <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Upload size={40} className="text-white" />
            </div>
            <h1 className="text-3xl font-bold text-white mb-2">
              {existingClub ? 'Update Your Club' : 'Register Your Club'}
            </h1>
            <p className="text-white/90">
              {existingClub ? 'Modify your club details and images' : 'Share your club details with the community'}
            </p>
          </div>

          <form onSubmit={handleSubmit} className="p-8 space-y-6">
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Club Name *
              </label>
              <div className="relative">
                <FileText size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  required
                  value={formData.clubName}
                  onChange={(e) => setFormData({ ...formData, clubName: e.target.value })}
                  placeholder="Enter your club name"
                  className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Festival Type *
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {festivalTypes.map((festival) => (
                  <button
                    key={festival.value}
                    type="button"
                    onClick={() => setFormData({ ...formData, festivalType: festival.value })}
                    className={`p-4 rounded-xl border-2 transition-all duration-300 hover:scale-105 ${
                      formData.festivalType === festival.value
                        ? 'border-purple-500 bg-gradient-to-br from-purple-50 to-pink-50 shadow-md'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-3xl mb-2">{festival.icon}</div>
                    <div className="text-sm font-medium text-gray-700">{festival.label}</div>
                  </button>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Tell us about your club, its history, and activities..."
                rows="5"
                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors resize-none"
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Contact Email
              </label>
              <div className="relative">
                <Mail size={20} className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="email"
                  value={formData.email}
                  readOnly
                  className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl bg-gray-50"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Club Images * (Max 10 images)
              </label>
              
              {previewImages.length > 0 && (
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                  {previewImages.map((img, index) => (
                    <div key={index} className="relative group aspect-square rounded-xl overflow-hidden border-2 border-gray-200">
                      <img 
                        src={img} 
                        alt={`Preview ${index + 1}`}
                        className="w-full h-full object-cover"
                      />
                      <button
                        type="button"
                        onClick={() => removeImage(index)}
                        className="absolute top-2 right-2 w-8 h-8 bg-red-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600"
                      >
                        <X size={16} className="text-white" />
                      </button>
                    </div>
                  ))}
                </div>
              )}

              {previewImages.length < 10 && (
                <label className="block cursor-pointer">
                  <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-purple-500 hover:bg-purple-50/50 transition-all duration-300">
                    <ImagePlus size={48} className="mx-auto text-gray-400 mb-3" />
                    <p className="text-gray-600 font-medium mb-1">Click to upload images</p>
                    <p className="text-sm text-gray-500">PNG, JPG up to 10MB each</p>
                  </div>
                  <input
                    type="file"
                    multiple
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                  />
                </label>
              )}
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transform hover:scale-[1.02] transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {loading ? (
                <>
                  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <span>{existingClub ? 'Updating...' : 'Uploading...'}</span>
                </>
              ) : (
                <>
                  <Save size={20} />
                  <span>{existingClub ? 'Update Club' : 'Submit for Review'}</span>
                </>
              )}
            </button>

            <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
              <p className="text-sm text-blue-800">
                <strong>Note:</strong> Your club submission will be reviewed by our team. 
                You'll be notified once it's approved and visible on the website.
              </p>
            </div>
          </form>
        </div>
      </div>

      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}

      <style jsx>{`
        @keyframes scaleIn {
          from {
            opacity: 0;
            transform: scale(0.9);
          }
          to {
            opacity: 1;
            transform: scale(1);
          }
        }
        
        .animate-scaleIn {
          animation: scaleIn 0.3s ease-out;
        }
      `}</style>
    </div>
  );
}