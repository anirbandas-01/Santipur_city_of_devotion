# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# End of https://mrkandreev.name/snippets/gitignore-generator/#Node




export const addClub = async (req, res) => {
  try {
    console.log("üì© /api/clubs/add called");
    console.log("Body:", req.body);
    console.log("Files:", req.files);

    const { clubName, festivalType, description, email } = req.body;
    const files = req.files || [];

    if (!files.length) {
      return res.status(400).json({ success: false, message: "No images uploaded" });
    }
// ‚úÖ Upload images to Cloudinary
    const uploadedImages = await Promise.all(
      files.map(async (file) => {
        
         console.log("‚è´ Uploading to Cloudinary:", file.path);

        const result = await cloudinary.uploader.upload(file.path, {
          folder: "clubs",
        });
        return result.secure_url;
      })
    );

    // ‚úÖ Save form data to MongoDB
    const club = new Club({
      clubName,
      festivalType,
      description,
      email,
      images: uploadedImages,
    });

    await club.save();

    res.status(201).json({ success: true, message: "Club added successfully", club });
  } catch (error) {
    console.error("‚ùå Error adding club:", error);
    res.status(500).json({ success: false, message: "Upload failed", error: error.message });
  }
};
